{% assign productId = product.id | downcase %}
{% assign productNotCopied = false %}
{% if product.metafields.BackOffice.ProductId == blank or product.metafields.BackOffice.ProductId == productId %}
	{% assign productNotCopied = true %}
{% endif %}
{% if product.metafields.BackOffice.CustomersCanvasLinked and productNotCopied %}

{{ 'cc-init.css' | asset_url | stylesheet_tag }}
{{ 'storefrontInit.js' | asset_url | script_tag }}
{{ 'storefront.js' | asset_url | script_tag }}
{{ 'storefront.main.js' | asset_url | script_tag }}

<script type="text/javascript">
var sdkInstance="appInsightsSDK";window[sdkInstance]="appInsights";var aiName=window[sdkInstance],aisdk=window[aiName]||function(e){function n(e){t[e]=function(){var n=arguments;t.queue.push(function(){t[e].apply(t,n)})}}var t={config:e};t.initialize=!0;var i=document,a=window;setTimeout(function(){var n=i.createElement("script");n.src=e.url||"https://az416426.vo.msecnd.net/scripts/b/ai.2.min.js",i.getElementsByTagName("script")[0].parentNode.appendChild(n)});try{t.cookie=i.cookie}catch(e){}t.queue=[],t.version=2;for(var r=["Event","PageView","Exception","Trace","DependencyData","Metric","PageViewPerformance"];r.length;)n("track"+r.pop());n("startTrackPage"),n("stopTrackPage");var s="Track"+r[0];if(n("start"+s),n("stop"+s),n("addTelemetryInitializer"),n("setAuthenticatedUserContext"),n("clearAuthenticatedUserContext"),n("flush"),t.SeverityLevel={Verbose:0,Information:1,Warning:2,Error:3,Critical:4},!(!0===e.disableExceptionTracking||e.extensionConfig&&e.extensionConfig.ApplicationInsightsAnalytics&&!0===e.extensionConfig.ApplicationInsightsAnalytics.disableExceptionTracking)){n("_"+(r="onerror"));var o=a[r];a[r]=function(e,n,i,a,s){var c=o&&o(e,n,i,a,s);return!0!==c&&t["_"+r]({message:e,url:n,lineNumber:i,columnNumber:a,error:s}),c},e.autoExceptionInstrumented=!0}return t}(
{
  instrumentationKey:"3890a9c8-f4f1-4ed1-a176-936b19108a3c"
}
);window[aiName]=aisdk,aisdk.queue&&0===aisdk.queue.length&&aisdk.trackPageView({});
</script>
<script>
  document.addEventListener("DOMContentLoaded", async function() {
    
    document.querySelector('form[action="/cart/add"]').onsubmit = (evt) => {
      evt.preventDefault();
      evt.stopPropagation();
      return false;
    }
    
    const designButton = document.querySelector("[target='cc-editor-button']");
    const preflightButton = document.querySelector("[target='cc-upload-button']");
    const editorContainer = document.getElementById('editor-parent-for-product');
    
    const ecommerceSystem = {
      {%  if customer %}
      userId: ShopifyInit.getUserIdForCc('{{shop.domain}}', '{{ customer.id }}'),
      {%  else %}
      userId: ShopifyInit.getUserIdForCc('{{shop.domain}}'),
      {% endif %}
      pluginSettings: { shopifyBaseUrl: 'https://' + '{{ shop.domain }}', currency: ShopifyInit.getCurrency() },
      tenantId: 1237,
      existingOrder: ShopifyInit.getExistingOrder(),
      ecommerceSystemDomain: '{{shop.permanent_domain}}'
    };
    
    const product = {{ product | json }};
    
    storefront = new Aurigma.BackOffice({
      options: { useProjectBuffer: true },
      tenantId: ecommerceSystem.tenantId,
      backOfficeUrl: 'https://customerscanvashub.com/',
      pluginSettings: ecommerceSystem.pluginSettings,
      themeSettings: {
        styles: {
          {% if product.tags contains "editor-no-border" %}          
          "--au-collapse_-_border": "none"
          {% endif %}
        }
      },
      localization: [
      ]
    });
    
    document.getElementById('editor-parent-for-product').addEventListener('load', () => {
		document.getElementById('preloader-holder').style.display = 'none';
  	});

    storefront.templates.findByProduct(product.id).then(integrationInfo => {
      console.log(integrationInfo);
      {% assign preflight_ready = false %}
      {% for tag in product.tags %}
      	{% if tag contains 'preflight-ready' %}
    	  {% assign preflight_ready = true %}
  	    {% endif %}
      {% endfor %}
      {% if preflight_ready == false %}
        storefront.loadEditor(editorContainer, 
                              integrationInfo, { id: ecommerceSystem.userId }, 
                              product, ecommerceSystem.existingOrder).then(driver => {
          console.log(driver);
          ShopifyInit.ecDriver = driver;
          ShopifyInit.ecDriver.cart.onSubmitting.subscribe( async function() {
            let url = `${integrationInfo.projectsBufferUrl}/tenants/${ecommerceSystem.tenantId}/projects/create`;

            let pingUrl = `${integrationInfo.projectsBufferUrl}/ping`;
            let pingResult = await ShopifyInit.pingBuffer(pingUrl);
            if (pingResult) {
                await ShopifyInit.saveProject(url);
            } else {
                alert("Service is temporarily unavailable, please try again later");
            }
          });
          
          designButton.addEventListener("click", function() {
            if (ShopifyInit.editorLoaded === true) {
              // update product model state
              ShopifyInit.isApplyOptions = true;
              ShopifyInit.applyOptions();
            }

            // to editor
            ShopifyInit.navigateToPage("editor");
            editorContainer.scrollIntoView();
          });
          // update product model state
          if (ShopifyInit.isApplyOptions === false) {
            ShopifyInit.applyOptions();
          }

          // notify loaded
          ShopifyInit.editorLoaded = true;
          
          const queryParams = ShopifyInit.getQueryParameters();
          if (queryParams && queryParams['page'] === 'design') {
            if (!queryParams['mode'] || queryParams['mode'] === 'personalize')
              designButton.click();
            else {
              if (preflightButton)
                  preflightButton.click();
            }
          }
        });
      {% else %}
      const loadEditor = (mode) => {
          const config = JSON.parse(integrationInfo.config);
    	  config.widgets = config.widgets.filter(x => x.mode == mode);
    	  config.steps = config.steps.filter(x => x.mode == mode);
    	  integrationInfo.config = JSON.stringify(config);
          storefront.loadEditor(editorContainer, 
                                integrationInfo, { id: ecommerceSystem.userId }, 
                                product, ecommerceSystem.existingOrder).then(driver => {
            ShopifyInit.ecDriver = driver;
            ShopifyInit.ecDriver.cart.onSubmitting.subscribe( async function() {
              let url = `${integrationInfo.projectsBufferUrl}/tenants/${ecommerceSystem.tenantId}/projects/create`;

              let pingUrl = `${integrationInfo.projectsBufferUrl}/ping`;
              let pingResult = await ShopifyInit.pingBuffer(pingUrl);
              ShopifyInit.ecDriver.orders.forEach(x => {
                x.props = x.props || {};
                x.props._hidden = x.props?._hidden || {};
                x.props._hidden.editorMode = mode;
              });
              if (pingResult) {
                  await ShopifyInit.saveProject(url);
              } else {
                  alert("Service is temporarily unavailable, please try again later");
              }
            });
            
            // update product model state
            if (ShopifyInit.isApplyOptions === false) {
              ShopifyInit.applyOptions();
            }

            // notify loaded
            ShopifyInit.editorLoaded = true;
            // to editor
            ShopifyInit.navigateToPage("editor");
            editorContainer.scrollIntoView();
          });
        }
        designButton.addEventListener("click", function() {
          loadEditor('default');
        });

        if (preflightButton) {
          preflightButton.addEventListener("click", function() {
            loadEditor('preflight');
          });
        }
      
      	const queryParams = ShopifyInit.getQueryParameters();
        if (queryParams && queryParams['page'] === 'design') {
          if (!queryParams['mode'] || queryParams['mode'] === 'default')
            designButton.click();
          else {
            if (preflightButton)
              preflightButton.click();
          }
        }
      {% endif %}
    });
    // load & initialize editor
	/*Aurigma.Storefront.load(ecommerceSystem, product, editorContainer).then(result => {
      
      ShopifyInit.ecDriver = Aurigma.Storefront.driver;
      ShopifyInit.ecDriver.cart.onSubmitting.subscribe( async function() {
        let url = `${Aurigma.Storefront.projectsBufferUrl}/tenants/${ecommerceSystem.tenantId}/projects/create`;

        let pingUrl = `${Aurigma.Storefront.projectsBufferUrl}/tenants/${ecommerceSystem.tenantId}/projects/1`;
        let pingResult = await Aurigma.Storefront.apiClient.pingService(pingUrl);
        if (pingResult) {
            await ShopifyInit.saveProject(url);
        } else {
            alert("Service is temporarily unavailable, please try again later");
        }
      });
      
      // update product model state
      if (ShopifyInit.isApplyOptions === false) {
    	ShopifyInit.applyOptions();
      }
      
      // notify loaded
      ShopifyInit.editorLoaded = true;
      
    });
    
    // navigate to editor
    designButton.addEventListener("click", function() {
      if (ShopifyInit.editorLoaded === true) {
        // update product model state
        ShopifyInit.isApplyOptions = true;
        ShopifyInit.applyOptions();
      }
      
      // to editor
      ShopifyInit.navigateToPage("editor");
      editorContainer.scrollIntoView();
    });
    
    if (preflightButton) {
      preflightButton.addEventListener("click", function() {
        if (ShopifyInit.editorLoaded === true) {
          // update product model state
          ShopifyInit.isApplyOptions = true;
          ShopifyInit.applyOptions();
        }

        // to editor
        ShopifyInit.navigateToPage("editor");
        editorContainer.scrollIntoView();
      });
    }
    
    const queryParams = ShopifyInit.getQueryParameters();
    if (queryParams && queryParams['page'] === 'design') {
      if (!queryParams['mode'] || queryParams['mode'] === 'personalize')
      	designButton.click();
      else {
        if (preflightButton)
        	preflightButton.click();
      }
    }

  });*/
  });
  
  function overrideThemeStrings() {
    theme.strings.addToCart = theme.productStrings.addToCart = 'Design products';
  }
  
</script>

{% endif %}